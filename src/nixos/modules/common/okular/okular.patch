diff --git a/part/pageview.cpp b/part/pageview.cpp
index 3de853a64..76cecc991 100644
--- a/part/pageview.cpp
+++ b/part/pageview.cpp
@@ -2827,11 +2827,58 @@ void PageView::mouseReleaseEvent(QMouseEvent *e)
         menu.addAction(new OKMenuTitle(&menu, i18n("Image (%1 by %2 pixels)", selectionRect.width(), selectionRect.height())));
         imageToClipboard = menu.addAction(QIcon::fromTheme(QStringLiteral("image-x-generic")), i18n("Copy to Clipboard"));
         imageToFile = menu.addAction(QIcon::fromTheme(QStringLiteral("document-save")), i18n("Save to File..."));
+
+        QAction *coordinatesToClipboard = nullptr;
+        struct {
+            int ptsX;
+            int ptsY;
+            int ptsWidth;
+            int ptsHeight;
+        } pdfViewRect;
+        {
+            auto zoomedPxToPt = [this](int px) { return (px / this->d->zoomFactor) * 72 / this->physicalDpiX(); };
+            auto findSingleBoundingPage = [&selectionRect, this]() -> PageViewItem * {
+                PageViewItem *found_item = nullptr;
+                for (PageViewItem *item : qAsConst(this->d->visibleItems)) {
+                    if (item->uncroppedGeometry().contains(selectionRect)) {
+                        if (found_item != nullptr) {
+                            return nullptr;
+                        } else {
+                            found_item = item;
+                        }
+                    }
+                }
+                return found_item;
+            };
+            auto *selectionRectBoundingPage = findSingleBoundingPage();
+            if (selectionRectBoundingPage) {
+                {
+                    const auto &pageGeometry = selectionRectBoundingPage->uncroppedGeometry();
+                    pdfViewRect.ptsX = zoomedPxToPt(selectionRect.left() - pageGeometry.left());
+                    pdfViewRect.ptsY = zoomedPxToPt(selectionRect.top() - pageGeometry.top());
+                    pdfViewRect.ptsWidth = zoomedPxToPt(selectionRect.width());
+                    pdfViewRect.ptsHeight = zoomedPxToPt(selectionRect.height());
+                }
+
+                menu.addAction(new OKMenuTitle(&menu, i18n("ViewRect coordinates (x:%1, y:%2, w:%3, h:%4 pt)", pdfViewRect.ptsX, pdfViewRect.ptsY, pdfViewRect.ptsWidth, pdfViewRect.ptsHeight)));
+
+                coordinatesToClipboard = menu.addAction(QIcon::fromTheme(QStringLiteral("edit-copy")), i18n("Copy to Clipboard"));
+            }
+        }
+
         const QAction *choice = menu.exec(e->globalPosition().toPoint());
+
         // check if the user really selected an action
         if (choice) {
+            if (choice == coordinatesToClipboard) {
+                QClipboard *cb = QApplication::clipboard();
+                QString coordinatesText = QString(QStringLiteral("%1,%2,%3,%4")).arg(pdfViewRect.ptsX).arg(pdfViewRect.ptsY).arg(pdfViewRect.ptsWidth).arg(pdfViewRect.ptsHeight);
+                cb->setText(coordinatesText, QClipboard::Clipboard);
+                if (cb->supportsSelection())
+                    cb->setText(coordinatesText, QClipboard::Selection);
+            }
             // IMAGE operation chosen
-            if (choice == imageToClipboard || choice == imageToFile) {
+            else if (choice == imageToClipboard || choice == imageToFile) {
                 // renders page into a pixmap
                 QPixmap copyPix(selectionRect.width(), selectionRect.height());
                 QPainter copyPainter(&copyPix);
