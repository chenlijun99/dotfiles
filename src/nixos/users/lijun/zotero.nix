{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.programs.zotero;

  jsonFormat = pkgs.formats.json {};

  zoteroConfigPath = ".zotero/zotero";

  profilesPath = zoteroConfigPath;

  profiles =
    flip mapAttrs' cfg.profiles (_: profile:
      nameValuePair "Profile${toString profile.id}" {
        Name = profile.name;
        Path = profile.path;
        IsRelative = 1;
        Default =
          if profile.isDefault
          then 1
          else 0;
      })
    // {
      General = {StartWithLastProfile = 1;};
    };

  profilesIni = generators.toINI {} profiles;

  userPrefValue = pref:
    builtins.toJSON (
      if isBool pref || isInt pref || isString pref
      then pref
      else builtins.toJSON pref
    );

  mkUserJs = prefs: extraPrefs: ''
    // Generated by Home Manager.

    ${concatStrings (mapAttrsToList (name: value: ''
        user_pref("${name}", ${userPrefValue value});
      '')
      prefs)}

    ${extraPrefs}
  '';
in {
  options = {
    programs.zotero = {
      enable = mkEnableOption "Zotero";

      package = mkOption {
        type = types.package;
        default = pkgs.zotero;
        defaultText = literalExpression "pkgs.zotero";
        example =
          literalExpression ''
          '';
        description = ''
          The Zotero package to use.
        '';
      };

      profiles = mkOption {
        type = types.attrsOf (types.submodule ({
          config,
          name,
          ...
        }: {
          options = {
            name = mkOption {
              type = types.str;
              default = name;
              description = "Profile name.";
            };

            id = mkOption {
              type = types.ints.unsigned;
              default = 0;
              description = ''
                Profile ID. This should be set to a unique number per profile.
              '';
            };

            settings = mkOption {
              type = types.attrsOf (jsonFormat.type
                // {
                  description = "Zotero preference (int, bool, string, and also attrs, list, float as a JSON string)";
                });
              default = {};
              example = literalExpression ''
                {
                  "extensions.zotfile.source_dir" = "/home/myuser/Downloads";
                }
              '';
              description = ''
                Attribute set of Zotero preferences.

                Zotero only supports int, bool, and string types for
                preferences, but home-manager will automatically
                convert all other JSON-compatible values into strings.
              '';
            };

            extraConfig = mkOption {
              type = types.lines;
              default = "";
              description = ''
                Extra preferences to add to <filename>user.js</filename>.
              '';
            };

            userChrome = mkOption {
              type = types.lines;
              default = "";
              description = "Custom Zotero user chrome CSS.";
              example = ''
              '';
            };

            userContent = mkOption {
              type = types.lines;
              default = "";
              description = "Custom Zotero user content CSS.";
              example = ''
              '';
            };

            path = mkOption {
              type = types.str;
              default = name;
              description = "Profile path.";
            };

            isDefault = mkOption {
              type = types.bool;
              default = config.id == 0;
              defaultText = "true if profile ID is 0";
              description = "Whether this is a default profile.";
            };
          };
        }));
        default = {};
        description = "Attribute set of Zotero profiles.";
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      (let
        defaults =
          catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
      in {
        assertion = cfg.profiles == {} || length defaults == 1;
        message =
          "Must have exactly one default Zotero profile but found "
          + toString (length defaults)
          + optionalString (length defaults > 1)
          (", namely " + concatStringsSep ", " defaults);
      })

      (let
        duplicates =
          filterAttrs (_: v: length v != 1) (zipAttrs
            (mapAttrsToList (n: v: {"${toString v.id}" = n;}) (cfg.profiles)));

        mkMsg = n: v: "  - ID ${n} is used by ${concatStringsSep ", " v}";
      in {
        assertion = duplicates == {};
        message =
          ''
            Must not have Zotero profiles with duplicate IDs but
          ''
          + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
      })
    ];

    home.packages = [cfg.package];

    home.file = mkMerge ([
        {
          "${zoteroConfigPath}/profiles.ini" =
            mkIf (cfg.profiles != {}) {text = profilesIni;};
        }
      ]
      ++ flip mapAttrsToList cfg.profiles (_: profile: {
        "${profilesPath}/${profile.path}/.keep".text = "";

        "${profilesPath}/${profile.path}/user.js" =
          mkIf (
            profile.settings
            != {}
            || profile.extraConfig != ""
          ) {
            text =
              mkUserJs profile.settings profile.extraConfig;
          };
      }));
  };
}
